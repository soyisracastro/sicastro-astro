---
import { navItems, companyInfo } from '@/lib/data';
import Button from '@/components/ui/Button.astro';

const currentPath = Astro.url.pathname;
---

<header class="sticky top-0 z-50 bg-white border-b border-border">
  <div class="container-custom">
    <div class="flex items-center justify-between h-16">
      <!-- Logo - Solo texto, minimalista -->
      <a href="/" class="flex items-center space-x-2 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 rounded-md">
        <div class="hidden sm:block">
          <div class="text-lg font-semibold text-text-primary leading-tight">
            {companyInfo.name}
          </div>
          <div class="text-xs text-text-tertiary">
            {companyInfo.slogan}
          </div>
        </div>
        <div class="sm:hidden text-lg font-semibold text-text-primary">
          {companyInfo.name}
        </div>
      </a>

      <!-- Desktop Navigation -->
      <nav class="hidden lg:flex items-center space-x-1">
        {navItems.map(item => (
          <a
            href={item.href}
            class:list={[
              'px-3 py-2 text-[15px] font-normal transition-colors duration-fast rounded-md focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2',
              currentPath === item.href
                ? 'text-text-primary font-medium bg-background'
                : 'text-text-secondary hover:text-text-primary hover:bg-background-hover'
            ]}
          >
            {item.label}
          </a>
        ))}
        <Button href="/contacto" variant="primary">
        Contáctanos
      </Button>
      </nav>

      <!-- Mobile Menu Button -->
      <button
        id="mobile-menu-button"
        type="button"
        class="lg:hidden inline-flex items-center justify-center p-2 rounded-md text-text-secondary hover:text-text-primary hover:bg-background-hover focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary"
        aria-label="Abrir menú"
        aria-expanded="false"
      >
        <svg
          class="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"
          />
        </svg>
      </button>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div
    id="mobile-menu"
    class="hidden lg:hidden border-t border-border"
  >
    <div class="container-custom py-4 space-y-1">
      {navItems.map(item => (
        <a
          href={item.href}
          class:list={[
            'block px-4 py-3 rounded-md text-[15px] font-normal transition-colors duration-fast',
            currentPath === item.href
              ? 'bg-background text-text-primary font-medium'
              : 'text-text-secondary hover:bg-background-hover hover:text-text-primary'
          ]}
        >
          {item.label}
        </a>
      ))}
      <Button href="/contacto" variant="primary" class="w-full">
        Contáctanos
      </Button>
    </div>
  </div>
</header>

<script>
  // Mobile menu toggle
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('mobile-menu-button');
    const menu = document.getElementById('mobile-menu');

    if (button && menu) {
      button.addEventListener('click', () => {
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', String(!isExpanded));
        menu.classList.toggle('hidden');
        
        // Update icon
        const svg = button.querySelector('svg path');
        if (svg) {
          if (isExpanded) {
            svg.setAttribute('d', 'M4 6h16M4 12h16M4 18h16');
          } else {
            svg.setAttribute('d', 'M6 18L18 6M6 6l12 12');
          }
        }
      });

      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!button.contains(e.target as Node) && !menu.contains(e.target as Node)) {
          menu.classList.add('hidden');
          button.setAttribute('aria-expanded', 'false');
        }
      });

      // Close menu on navigation
      const links = menu.querySelectorAll('a');
      links.forEach(link => {
        link.addEventListener('click', () => {
          menu.classList.add('hidden');
          button.setAttribute('aria-expanded', 'false');
        });
      });
    }
  });
</script>